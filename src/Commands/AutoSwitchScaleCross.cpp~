// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "AutoSwitchScaleCross.h"
#include "Commands/RobotStraight.h"
#include "Commands/RobotTurn.h"
#include "Commands/RobotDwell.h"
#include "Commands/RobotCubeEjector.h"
#include "Commands/RobotScissorLift.h"

// distances for each straight command in the group
double distances[4][2] =
{
		50.0, 100.0, 40.0, 30.0,	// switch values
		50.0, 100.0, 60.0, 40.0		// scale values
};

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AutoSwitchScaleCross::AutoSwitchScaleCross(double dwellTime, int switchOrScale, int leftOrRight) {
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
     // Add Commands here:
    // e.g. AddSequential(new Command1());
    //      AddSequential(new Command2());
    // these will run in order.

    // To run multiple commands at the same time,
    // use AddParallel()
    // e.g. AddParallel(new Command1());
    //      AddSequential(new Command2());
    // Command1 and Command2 will run in parallel.

    // A command group will require all of the subsystems that each member
    // would require.
    // e.g. if Command1 requires chassis, and Command2 requires arm,
    // a CommandGroup containing them would require both the chassis and the
    // arm.
              // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
              // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

    AddSequential(new RobotDwell(dwellTime));

    AddSequential(new RobotStraight(distances[0][switchOrScale], Robot::autoStraightMotorSpeed));
    AddSequential(new RobotDwell(Robot::autoDwellTime));

    AddSequential(new RobotTurn(Robot::startSideTurnFactor[leftOrRight], Robot::autoTurnMotorSpeed));
    AddSequential(new RobotDwell(Robot::autoDwellTime));

    AddSequential(new RobotStraight(distances[1][switchOrScale], Robot::autoStraightMotorSpeed));
    AddSequential(new RobotDwell(Robot::autoDwellTime));

    AddSequential(new RobotTurn(Robot::startSideTurnFactor[leftOrRight], Robot::autoTurnMotorSpeed));
    AddSequential(new RobotDwell(Robot::autoDwellTime));

    AddSequential(new RobotStraight(distances[2][switchOrScale], Robot::autoStraightMotorSpeed));
    AddSequential(new RobotDwell(Robot::autoDwellTime));

    AddSequential(new RobotTurn(Robot::startSideTurnFactor[leftOrRight], Robot::autoTurnMotorSpeed));
    AddSequential(new RobotDwell(Robot::autoDwellTime));

    AddSequential(new RobotStraight(distances[3][switchOrScale], Robot::autoStraightMotorSpeed));
    AddSequential(new RobotDwell(Robot::autoDwellTime));

    AddSequential(new RobotTurn(Robot::startSideTurnFactor[leftOrRight] * Robot::autoTurnAngle,
    		Robot::autoTurnMotorSpeed));
    AddSequential(new RobotDwell(Robot::autoDwellTime));

    AddSequential(new RobotCubeEjector());
}
